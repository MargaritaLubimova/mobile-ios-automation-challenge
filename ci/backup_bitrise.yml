---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
trigger_map:
- push_branch: "*"
  workflow: tests
- pull_request_source_branch: "*"
  workflow: tests
workflows:
  tests:
    steps:
    - activate-ssh-key@4.0.3:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0.17: {}
    - cache-pull@2.1.1: {}
    - certificate-and-profile-installer@1.10.1: {}
    - xcode-test@2.4.1:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - scheme: "$BITRISE_SCHEME"
        - should_retry_test_on_fail: 'yes'
        - xcpretty_test_options: --color --report junit --output "${BITRISE_DEPLOY_DIR}/xcode-test-results-${BITRISE_SCHEME}.xml"
    - cache-push@2:
        inputs:
        - compress_archive: 'true'
        - cache_paths: "~/Library/Developer/Xcode/DerivedData"
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # write your script here
            echo "Hello World!"

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb

            cp -r $BITRISE_XCRESULT_PATH $BITRISE_SOURCE_DIR/ci
            cd $BITRISE_SOURCE_DIR/ci && mkdir -p allure/result && mkdir -p allure/report
            ls $BITRISE_SOURCE_DIR/ci/
            chmod +x xcresults
            ./xcresults export Test.xcresult ./allure/result

            zip -r result.zip ./allure
            cp result.zip $BITRISE_DEPLOY_DIR
    - deploy-to-bitrise-io@1: {}
app:
  envs:
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: qa-automation-ios-test.xcodeproj
  - opts:
      is_expand: false
    BITRISE_SCHEME: qa-automation-ios-test
  - opts:
      is_expand: false
    BITRISE_EXPORT_METHOD: development
